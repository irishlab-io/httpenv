---
name: "Continous Integration - Main"

on: # yamllint disable-line rule:truthy
  pull_request:
    branches:
      - main
    paths-ignore:
      - 'README.md'
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'
  schedule:
    - cron: '32 6 * * *'

concurrency:
  group: ${{ github.ref }}-${{ github.workflow }}
  cancel-in-progress: true

jobs:

  secret-scanning:
    name: GitGuardian - Scan
    runs-on: ubuntu-24.04
    timeout-minutes: 5

    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.7
        with:
          fetch-depth: 0

      - name: GitGuardian scan
        uses: GitGuardian/ggshield/actions/secret@v1.29.0
        env:
          GITHUB_PUSH_BEFORE_SHA: ${{ github.event.before }}
          GITHUB_PUSH_BASE_SHA: ${{ github.event.base }}
          GITHUB_PULL_BASE_SHA: ${{ github.event.pull_request.base.sha }}
          GITHUB_DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
          GITGUARDIAN_API_KEY: ${{ secrets.GITGUARDIAN_API_KEY }}

  sast:
    name: CodeQL - Analyze ${{ matrix.language }}
    runs-on: ubuntu-24.04
    timeout-minutes: 5

    needs:
      - secret-scanning

    permissions:
      actions: read
      contents: read
      packages: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        include:
        - language: go
          build-mode: autobuild

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        build-mode: ${{ matrix.build-mode }}
    - if: matrix.build-mode == 'manual'
      shell: bash
      run: |
        echo 'If you are using a "manual" build mode for one or more of the' \
          'languages you are analyzing, replace this with the commands to build' \
          'your code, for example:'
        echo '  make bootstrap'
        echo '  make release'
        exit 1

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"

  docker-build:
    name: Docker - Build Image
    runs-on: ubuntu-24.04
    timeout-minutes: 5

    needs:
      - sast

    outputs:
      image-tag: ${{ steps.image-tag.outputs.image-tag }}

    permissions:
      attestations: write
      contents: read
      id-token: write
      packages: write
      pull-requests: write

    env:
      COMMENT-ENABLE: true
      CONTEXT: .
      FILE: false
      FLAVOR-RULES: latest=auto
      GHCR-ENABLE: true
      IMAGE-NAMES: ghcr.io/${{ github.repository }}
      PLATFORMS: linux/amd64,linux/arm64
      PUSH: true
      TAG-RULES: |
        type=raw,value=gha-${{ github.run_id }},enable=${{github.event_name == 'pull_request'}},priority=200
        type=raw,value=latest,enable={{is_default_branch}},priority=100
        type=raw,value=stable-{{date 'YYYYMMDD'}}-{{sha}},enable={{is_default_branch}},priority=300
        type=ref,event=pr,priority=100
        type=ref,event=tag,priority=200
      TARGET: false

    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.7

      - name: Set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@v3.1.0

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3.4.0

      - name: Login to GHCR
        if: env.GHCR-ENABLE
        uses: docker/login-action@v3.2.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta
        id: docker_meta
        uses: docker/metadata-action@v5.5.1
        with:
          images: ${{ env.IMAGE-NAMES }}
          flavor: ${{ env.FLAVOR-RULES }}
          tags: ${{ env.TAG-RULES }}

      - name: Docker Build and Push
        id: build_image
        uses: docker/build-push-action@v6.3.0
        with:
          platforms: ${{ env.PLATFORMS }}
          context: ${{ env.CONTEXT }}
          file: ${{ env.FILE }}
          target: ${{ env.TARGET }}
          builder: ${{ steps.buildx.outputs.name }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          push: ${{ env.PUSH }}
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
          provenance: true
          sbom: true

      - name: Attest
        uses: actions/attest-build-provenance@v1.3.3
        id: attest
        with:
          subject-name: ${{ env.IMAGE-NAMES }}
          subject-digest: ${{ steps.docker_meta.outputs.labels }}
          push-to-registry: true

      - name: Find comment for image tags
        uses: peter-evans/find-comment@v3.1.0
        if: github.event_name == 'pull_request' && env.comment-enable
        id: fc
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: 'github-actions[bot]'
          body-includes: Docker image tag(s) pushed

      - name: Create or update comment for image tags
        uses: peter-evans/create-or-update-comment@v4.0.0
        if: github.event_name == 'pull_request' && env.comment-enable
        with:
          comment-id: ${{ steps.fc.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            Docker image tag(s) pushed:
            ```text
            ${{ steps.docker_meta.outputs.tags }}
            ```

            Labels added to images:
            ```text
            ${{ steps.docker_meta.outputs.labels }}
            ```
          edit-mode: replace

      - name: Find the primary image tag we just pushed, and output it
        id: image-tag
        run: |
          # shellcheck disable=SC2086
          echo "image-tag=${{ steps.docker_meta.outputs.version }}" >> $GITHUB_OUTPUT
